{"version":3,"sources":["components/Slider.js","api/marvel.js","components/App.js","utils/serviceWorker.js","index.js"],"names":["Slider","state","error","isLoaded","items","copyright","fetch","process","then","res","json","result","setState","data","results","attributionHTML","this","message","dots","infinite","speed","slidesToShow","slidesToScroll","arrows","responsive","breakpoint","settings","data-testid","map","item","index","thumbnail","path","includes","key","name","className","src","extension","alt","dangerouslySetInnerHTML","__html","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console"],"mappings":"6UAOqBA,E,4MACnBC,MAAQ,CACNC,MAAO,KACPC,UAAU,EACVC,MAAO,GACPC,UAAW,M,kEAGQ,IAAD,OCdbC,MAAM,yFAAD,OAA0FC,qCDgBjGC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GACJ,EAAKC,SAAS,CACZT,UAAU,EACVC,MAAOO,EAAOE,KAAKC,QACnBT,UAAWM,EAAOI,qBAGtB,SAAAb,GACE,EAAKU,SAAS,CACZT,UAAU,EACVD,e,+BAME,IAAD,EACuCc,KAAKf,MAA3CC,EADD,EACCA,MAAOC,EADR,EACQA,SAAUC,EADlB,EACkBA,MAAOC,EADzB,EACyBA,UA+BhC,OAAIH,EACK,uCAAaA,EAAMe,SAChBd,EASR,6BACE,kBAAC,IAAD,iBA1CW,CACfe,MAAM,EACNC,UAAU,EACVC,MAAO,IACPC,aAAc,EACdC,eAAgB,EAChBC,QAAQ,EACRC,WAAY,CACV,CACEC,WAAY,KACZC,SAAU,CACRL,aAAc,IAGlB,CACEI,WAAY,KACZC,SAAU,CACRL,aAAc,IAGlB,CACEI,WAAY,IACZC,SAAU,CACRL,aAAc,EACdE,QAAQ,MAkBV,CAA2BI,cAAY,gBAEnCvB,EAAMwB,KAAI,SAACC,EAAMC,GACf,IAAID,EAAKE,UAAUC,KAAKC,SAAS,uBAC/B,OACE,yBAAKC,IAAKL,EAAKM,KAAMC,UAAU,cAAcT,cAAA,iBAAuBG,IAClE,yBAAKM,UAAU,eACb,yBAAKC,IAAG,UAAKR,EAAKE,UAAUC,KAApB,YAA4BH,EAAKE,UAAUO,WAAaC,IAAKV,EAAKM,QAE5E,4BAAKN,EAAKM,WAOtB,uBAAGK,wBAAyB,CAAEC,OAAQpC,MAxBxC,yBAAK+B,UAAU,WACb,yBAAKC,IAAI,0BAA0BE,IAAI,eACvC,+C,GAjE0BG,a,MEOrBC,MAVf,WACE,OACE,yBAAKP,UAAU,OACb,yBAAKA,UAAU,OAAOC,IAAI,kCAAkCE,IAAI,WAChE,wBAAIH,UAAU,SAAd,aAAgC,0BAAMA,UAAU,aAAhB,QAAhC,SAA6E,0BAAMA,UAAU,gBAAhB,WAA7E,KACA,kBAAC,EAAD,QCGcQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBhD,MAAK,SAAAiD,GACJA,EAAaC,gBAEdC,OAAM,SAAAzD,GACL0D,QAAQ1D,MAAMA,EAAMe,c","file":"static/js/main.c7a95b27.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport SlickSlider from 'react-slick';\nimport { fetchAPI } from '../api/marvel';\nimport \"slick-carousel/slick/slick.css\"; \nimport \"slick-carousel/slick/slick-theme.css\";\nimport \"../styles/Slider.css\";\n\nexport default class Slider extends Component {\n  state = {\n    error: null,\n    isLoaded: false,\n    items: [],\n    copyright: null\n  };\n\n  componentDidMount() {\n    fetchAPI()\n      .then(res => res.json())\n      .then(result => {\n        this.setState({\n          isLoaded: true,\n          items: result.data.results,\n          copyright: result.attributionHTML\n        });\n      },\n      error => {\n        this.setState({\n          isLoaded: true,\n          error\n        });\n      }\n    )\n  }\n\n  render() {\n    const { error, isLoaded, items, copyright } = this.state;\n    const settings = {\n      dots: false,\n      infinite: true,\n      speed: 500,\n      slidesToShow: 6,\n      slidesToScroll: 2,\n      arrows: true,\n      responsive: [\n        {\n          breakpoint: 1290,\n          settings: {\n            slidesToShow: 5\n          }\n        },\n        {\n          breakpoint: 1024,\n          settings: {\n            slidesToShow: 4\n          }\n        },\n        {\n          breakpoint: 768,\n          settings: {\n            slidesToShow: 4,\n            arrows: false\n          }\n        }\n      ]\n    };\n\n    if (error) {\n      return <div>Error: {error.message}</div>;\n    } else if (!isLoaded) {\n      return (\n        <div className=\"loading\">\n          <img src=\"./assets/spider-man.gif\" alt=\"Loading...\"/>\n          <h2>Loading...</h2>\n        </div>\n      )\n    } else {\n      return (\n        <div>\n          <SlickSlider {...settings} data-testid=\"slickSlider\">\n            {\n              items.map((item, index) => {\n                if(!item.thumbnail.path.includes('image_not_available')) {\n                  return (\n                    <div key={item.name} className=\"slider-item\" data-testid={`slider-${index}`}>\n                      <div className=\"img-wrapper\">\n                        <img src={`${item.thumbnail.path}.${item.thumbnail.extension}`} alt={item.name}/>\n                      </div>\n                      <h2>{item.name}</h2>\n                    </div>\n                  )\n                }\n              })\n            }\n          </SlickSlider>\n          <p dangerouslySetInnerHTML={{ __html: copyright}}></p>\n        </div>\n      );\n    }\n  }\n}\n","export function fetchAPI() {\n  return fetch(`https://gateway.marvel.com:443/v1/public/characters?orderBy=-modified&limit=30&apikey=${process.env.REACT_APP_API_KEY}`)\n}","import React from 'react';\nimport Slider from './Slider'\nimport '../styles/App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <img className=\"logo\" src=\"./assets/marvel-logo-header.jpg\" alt=\"Marvel\"/>\n      <h1 className=\"title\">Are you a <span className=\"hero-text\">hero</span> or a <span className=\"villian-text\">villian</span>?</h1>\n      <Slider/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.css';\nimport App from './components/App';\nimport * as serviceWorker from './utils/serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}